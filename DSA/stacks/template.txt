1) Nearest Greater to Right
2) Nearest Greater to Left
3) Nearest Smaller to Left
4) Nearest Smaller to Right
5) Stock Span Problem
6) Maximum Area of Histogram
7) Max Area of Rectangle in Binary Matrix
8) Rain Water Trapping
9) Implemnting a Min Stack (two ways (a) with using extra space (b) without extra space)
10) Implemnting Stack using Heap
11) The Celebrity Problem
12) Longest Valid Paranthesis
13) Iterative Tower of Hanoi

=====================================================================
=====================================================================

Identification: How to identify we can apply Stack for the given Problem
a) Given Input Array (If input is array most of the times stack/heap can apply)
b) If brute force giving O(n^2) and that too if its a dependent O(n^2) loop

dependent O(n^2) loop:
---------------------
for(int i=0; i<n; i++){
    for(int j=0; j<i; j++){ # j is dependent on i
        j --> going from 0 to i with j++
        j --> going from i to 0 with j--
        j --> going from i to n with j++
        j --> going from n to i with j--
    }
}

Note: If second/j loop is dependent on first/i loop then the improvised solution will be stack

***********************************************************************************
***********************************************************************************
1) Nearest Greater to Right

Brute force for the input array:
-------------------------------
arr = [1, 3, 0, 0, 1, 2, 4]
output = [3, 4, 1, 1, 2, 4, -1]

for(int i=0; i<n; i++){
    for(int j=i+1; j<n; j++){
        ## so we can apply Stack for improvised solution
    }
}

Stack solution:
--------------
We need to traverse the array from [right to -> left] because stack follows LIFO
check i'th element with stack.top():
a) if stack.top() > i'th element push element to res array
b) if stack.top() <= i'th element then pop elements until you find stack.top() > i'th element or until stack becomes empty
c) if stack is empty then we push -1 into res array
d) Reverse res array

vector<int> v;
stack<int> s;
size = len(arr)
for(int i=size-1; i>=0; i--){
    if(s.size == 0){
        v.push_back(-1);
    }
    elif (s.size > 0 && s.top() > arr[i]){
        v.push_back(s.top())
    }
    elif (s.size > 0 && s.top() <= arr[i]){
        while(s.size>0 && s.top() <= arr[i]){
            s.pop()
        }
        if (s.size==0){
            v.push_back(-1);
        }
        else{
            v.push_back(s.top());
        }
    }
    s.push(arr[i])
}
reverse v;

***********************************************************************************
***********************************************************************************
2) Nearest Greater to Left

Brute force for the input array:
-------------------------------
arr = [1, 3, 2, 4] 
output = [-1, -1, 3, -1]

for(int i=0; i<n; i++){
    for(int j=i-1; j>0; j--){
        ## so we can apply Stack for improvised solution
    }
}

Stack solution:
--------------
We need to traverse the array from [left to -> right] because stack follows LIFO
check i'th element with stack.top():
a) if stack.top() > i'th element push element to res array
b) if stack.top() <= i'th element then pop elements until you find stack.top() > i'th element or until stack becomes empty
c) if stack is empty then we push -1 into res array
d) no need of reverse res array

vector<int> v;
stack<int> s;
size = len(arr)
for(int i=0; i<size; i++){
    if(s.size == 0){
        v.push_back(-1);
    }
    elif (s.size > 0 && s.top() > arr[i]){
        v.push_back(s.top())
    }
    elif (s.size > 0 && s.top() <= arr[i]){
        while(s.size>0 && s.top() <= arr[i]){
            s.pop()
        }
        if (s.size==0){
            v.push_back(-1);
        }
        else{
            v.push_back(s.top());
        }
    }
    s.push(arr[i])
}

***********************************************************************************
***********************************************************************************
3) Nearest Smaller to Left

Brute force for the input array:
-------------------------------
arr = [4, 5, 2, 10, 8]
output = [-1, 4, -1, 2, 2]

for(int i=0; i<n; i++){
    for(int j=i-1; j>0; j--){
        ## so we can apply Stack for improvised solution
    }
}

Stack solution:
--------------
We need to traverse the array from [left to -> right] because stack follows LIFO
check i'th element with stack.top():
a) if stack.top() < i'th element push element to res array
b) if stack.top() >= i'th element then pop elements until you find stack.top() < i'th element or until stack becomes empty
c) if stack is empty then we push -1 into res array
d) no need of reverse res array

vector<int> v;
stack<int> s;
size = len(arr)
for(int i=0; i<size; i++){
    if(s.size == 0){
        v.push_back(-1);
    }
    elif (s.size > 0 && s.top() < arr[i]){
        v.push_back(s.top())
    }
    elif (s.size > 0 && s.top() >= arr[i]){
        while(s.size>0 && s.top() >= arr[i]){
            s.pop()
        }
        if (s.size==0){
            v.push_back(-1);
        }
        else{
            v.push_back(s.top());
        }
    }
    s.push(arr[i])
}

***********************************************************************************
***********************************************************************************
4) Nearest Smaller to Right

Brute force for the input array:
-------------------------------
arr = [4, 5, 2, 10, 8]
output = [2, 2, -1, 8, -1]

for(int i=0; i<n; i++){
    for(int j=i+1; j<n; j++){
        ## so we can apply Stack for improvised solution
    }
}

Stack solution:
--------------
We need to traverse the array from [right to -> left] because stack follows LIFO
check i'th element with stack.top():
a) if stack.top() < i'th element push element to res array
b) if stack.top() >= i'th element then pop elements until you find stack.top() < i'th element or until stack becomes empty
c) if stack is empty then we push -1 into res array
d) Reverse res array

vector<int> v;
stack<int> s;
size = len(arr)
for(int i=size-1; i>=0; i--){
    if(s.size == 0){
        v.push_back(-1);
    }
    elif (s.size > 0 && s.top() < arr[i]){
        v.push_back(s.top())
    }
    elif (s.size > 0 && s.top() >= arr[i]){
        while(s.size>0 && s.top() >= arr[i]){
            s.pop()
        }
        if (s.size==0){
            v.push_back(-1);
        }
        else{
            v.push_back(s.top());
        }
    }
    s.push(arr[i])
}
reverse v;
***********************************************************************************
***********************************************************************************