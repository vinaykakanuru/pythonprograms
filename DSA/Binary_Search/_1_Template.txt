If we want to search for an element in a given sorted (either Asc/Desc) array, We need to implement BS

{% comment %} https://www.youtube.com/watch?v=4WmTRFZilj8&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2&index=1 {% endcomment %}
##---------------------------------------------------------------------------------------------------
# we can calculate {mid = int((start + end) /2)} but the problem comes if array size is huge and
# index sum of (start + end) may exceed INT capacity. So we can optimize this by converting mid value into
# mid = int(start + (end-start)/2)

## Normal BS Template (default we assume array is sorted in asc order)
while(start <= end):
	mid = int(start + (end-start)/2)
	if elem == arr[mid]:
		return mid
	elif elem < arr[mid]:
		end = mid - 1
	else:
		start = mid + 1
##---------------------------------------------------------------------------------------------------


{% comment %} https://www.youtube.com/watch?v=4WmTRFZilj8&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2&index=3 {% endcomment %}
##---------------------------------------------------------------------------------------------------
## BS Template for sorted array in desc array
while(start <= end):
	mid = int(start + (end-start)/2)
	if elem == arr[mid]:
		return mid
	elif elem < arr[mid]:
		start = mid + 1
	else:
        end = mid - 1
##---------------------------------------------------------------------------------------------------


{% comment %} https://www.youtube.com/watch?v=4WmTRFZilj8&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2&index=4 {% endcomment %}
##---------------------------------------------------------------------------------------------------
## order not known (how to find the given array is sorted in Asc/Desc order)
# if array size > 1 then compare first two elements
## Edge case: if starting elements are of same value then go for higher indexes until you find the comparison of two elements
if arr[0] < arr[1]:
    hit ascending order BS
else:
    hit descending order BS
##---------------------------------------------------------------------------------------------------


{% comment %} https://www.youtube.com/watch?v=4WmTRFZilj8&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2&index=5 {% endcomment %}
##---------------------------------------------------------------------------------------------------
## Find first occurence of an elemnet to be searched in sorted array
# [2,4,10,10,10,18,20] let say we are searching for 10 and arr[mid] = 10 but this might be a possible answer
# but we need to check in left part of array too to find the first occurence of an element
res = -1
while(start <= end):
	mid = int(start + (end-start)/2)
	if elem == arr[mid]:
		res = mid
        end = mid - 1
	elif elem < arr[mid]:
		end = mid - 1
	else:
        start = mid + 1
return res
##---------------------------------------------------------------------------------------------------


{% comment %} https://www.youtube.com/watch?v=4WmTRFZilj8&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2&index=5 {% endcomment %}
##---------------------------------------------------------------------------------------------------
## Find last occurence of an elemnet to be searched in sorted array
# [2,4,10,10,10,18,20] let say we are searching for 10 and arr[mid] = 10 but this might be a possible answer
# but we need to check in right part of array too to find the last occurence of an element
res = -1
while(start <= end):
	mid = int(start + (end-start)/2)
	if elem == arr[mid]:
		res = mid
        start = mid + 1
	elif elem < arr[mid]:
		end = mid - 1
	else:
        start = mid + 1
return res
##---------------------------------------------------------------------------------------------------


{% comment %} https://www.youtube.com/watch?v=4WmTRFZilj8&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2&index=6 {% endcomment %}
##---------------------------------------------------------------------------------------------------
## Count of an element in a given sorted array
# [2,4,10,10,10,18,20] if element repeats in Sorted array i.e all occurences of that element sits together
# If array is not sorted then element might scatter into different indexes/places then we need to travese entire array to find the count
# So to find count of an element in sorted array we need to find the length of element sitting all together
# Simply, find [last_occurence - first_occurence + 1]

first_occurence = find the first occurence of given element from given sorted array
last_occurence = find the last occurence of given element from given sorted array
return last_occurence - first_occurence + 1 
##---------------------------------------------------------------------------------------------------


{% comment %} https://www.youtube.com/watch?v=4WmTRFZilj8&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2&index=7 {% endcomment %}
##---------------------------------------------------------------------------------------------------
## Number of times array is rotated
[2,5,6,8,11,12,15,18] --> no of times Rotated - zero
[11,12,15,18,2,5,6,8] --> no of times Rotated - four
So, we can say Number of times array is rotated = Index of the min Number

?? But question is how to find the min number from the rotated sorted array using BS (how to know that 2 is min from the given array)
** Generic BS steps are find the mid and move either left or right part of the array

## Step1: find the mid and compare if the mid element is the minimum number amongst rotated sorted array
# how to know that elem is min number 
    --> if the number is less than the both sides of the elements then we can say that elem is the smallest amongst rotated sorted array
    Eg: 11 >= 12 <= 15 - False (mid elem is not less than from both side elements)
        12 >= 15 <= 18 - False (mid elem is not less than from both side elements)
        15 >= 18 <= 2 - False (mid elem is not less than from both side elements)
        18 >= 2 <= 5 - True (mid elem is less than from both side elements)
        2 >= 5 <= 6 - False (mid elem is not less than from both side elements)
        5 >= 6 <= 8 - False (mid elem is not less than from both side elements)
        Now we can say that element 2 is smaller number amongst the rotated sorted array.
 
## Step2:find the deciding factor to move either left or right part of the array from mid position.
    --> we can have only two parts from the mid of the rotated sorted array either sorted part or unsorted part of an array
    Eg:  [11,12,15,18,2,5,6,8] given rotated sorted array. Mid elem is 18.
    If we see the elem from start to mid inclusive the first part is sorted and 
    If we see the array from mid elem inclusive to end of the array it is unsorted.
    we need to move towards the unsorted half part of the array to find the min amongst the rotated sorted array
    --> compare (0th index, mid index) and (mid index, end index) to find the unsorted array part 

n = len(arr)
while (start <= end):
    mid = int(start + (end - start)/2)

    ## because we are perfoming calculations on rotated sorted array 
    # and if we are at last index how can we find next, next elem should be starting of the array
    # and if we are at first index how can we find prev, prev elem should be last elem of the array

    next = (mid + 1) % n
    prev = (mid + n - 1) % n

    if arr[mid] <= arr[next] and arr[mid] <= arr[prev]:
        return mid

    if arr[start] <= arr[mid]:
        start = mid + 1
    elif arr[mid] <= arr[end]:
        end = mid - 1
##---------------------------------------------------------------------------------------------------


{% comment %} https://www.youtube.com/watch?v=Id-DdcWb5AU&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2&index=8 {% endcomment %}
##---------------------------------------------------------------------------------------------------
## Find and element from a rotated sorted array
# From the above problem statement we know how to find the min number from the rotated sorted array.
now we do have two parts of rotated sorted array. Both are sorted array parts only.
[11,12,15,18,2,5,6,8] --> 2 is min number and we can find the index of the min number using above discussed statement
And If we consider two parts from the minimum index we can have two sorted arrays --> [11,12,15,18], [2,5,6,8]
now we can apply BS on both normal sorted arrays to find the searchable element.

BS([11,12,15,18,2,5,6,8], start, index-1) --> return 2 [index of searchable elem (15)]
BS([11,12,15,18,2,5,6,8], index, end) --> return -1 [as no elem 15 found from the given (start, end) range]

And if both BS() returns -1 then we can say that element we are looking for is not present in rotated sorted array.
##---------------------------------------------------------------------------------------------------


{% comment %} https://www.youtube.com/watch?v=Id-DdcWb5AU&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2&index=9 {% endcomment %}
##---------------------------------------------------------------------------------------------------
## Searching in a nearly sorted array
Nearly Sorted array defines as any element of index "i" can be present at any of the indexes ["i-1", "i", "i+1"]
Eg: [5,10,30,20,40] # 20 is at index 3 and it can be at index (2, 3) (i-1, i). Same way 30 can be at (3)

# So In general BS we look into mid value index to go for futher serach iterations to move either left or right part of array
# Now in nearly sorted array we need to look into three places (mid-1, mid, mid+1), as element can be at (i-1, i, i+1) index


## To look into three place (mid-1, mid, mid+1) we need to be sure we are not going array index out of bound exception
# so while checking the element at (mid-1) index we need to be sure that (mid-1)>=start
# so while checking the element at (mid+1) index we need to be sure that (mid+1)<=end so that we won't look out of the array
# And as usual to move right or left part of the array we need to adjust the start, end values by 2.

while (start <= end):
    mid = int(start + (end - start)/2)
    if elem == arr[mid]:
        return mid
    elif (mid-1) >= start and elem == arr[mid-1]:
        return mid - 1
    elif (mid+1) <= end and elem == arr[mid+1]:
        return mid + 1
    elif elem < arr[mid]:
        end = mid - 2
    else:
        start = mid + 2
##---------------------------------------------------------------------------------------------------


{% comment %} https://www.youtube.com/watch?v=Id-DdcWb5AU&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2&index=10 {% endcomment %}
##---------------------------------------------------------------------------------------------------
## Find the floor of an element from a sorted array 
--> Definition: Floor of an element in a given sorted array is either the same element if present in array or 
                the greatest element smaller than the target element from the sorted array 
    Eg: arr = [1,2,3,4,8,10,10,12,19] and target = 5. Floor is 4 here from the given sorted array as per above definition


res = -1
while (start <= end):
    mid = int(start + (end - start)/2) 
    
    # as the same element can be its floor value
    if arr[mid] == elem: 
        return mid

    if arr[mid] < elem:
        res = mid
        start = mid + 1

    if arr[mid] > elem:
        end = mid - 1
return res
##---------------------------------------------------------------------------------------------------


{% comment %} https://www.youtube.com/watch?v=Id-DdcWb5AU&list=PL_z_8CaSLPWeYfhtuKHj-9MpYb6XQJ_f2&index=11 {% endcomment %}
##---------------------------------------------------------------------------------------------------
## Find the Ceil of an element from a sorted array 
--> Definition: Ceil of an element in a given sorted array is either the same element if present in array or 
                the lowest element greater than the target element from the sorted array 
    Eg: arr = [1,2,3,4,8,10,10,12,19] and target = 5. Ceil is 8 here from the given sorted array as per above definition

res = -1
while (start <= end):
    mid = int(start + (end - start)/2) 
    
    # as the same element can be its Ceil value
    if arr[mid] == elem: 
        return mid

    if arr[mid] > elem:
        res = mid
        end = mid - 1

    if arr[mid] < elem:
        start = mid + 1
return res
##---------------------------------------------------------------------------------------------------